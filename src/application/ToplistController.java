package application;

import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;

import java.io.IOException;
import java.net.URL;
import java.sql.SQLException;
import java.util.ResourceBundle;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.MenuItem;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.stage.Stage;

public class ToplistController {
	@FXML
	private MenuItem exit;

	// Event Listener on MenuItem[#exit].onAction
	@FXML
	public void exitProgram(ActionEvent event) {
		// TODO Autogenerated
	}
	
	
	
	 @FXML
	    private Button AdvSearch;
	    
	    @FXML
	    private Button Toplist;
	    
	    @FXML
	    private Button CheckOut;
	    
	     
	    @FXML
	    private Button GoBack;
	    
	    @FXML
	    private Button MyBooks;
	    
	@FXML private TableView<Book> result;
    	
        @FXML private TableColumn<Book, String> TitleCol;
        @FXML private TableColumn<Book, String> AuthorCol;
        @FXML private TableColumn<Book, String> GenreCol;
        @FXML private TableColumn<Book, Integer> PagesCol;
        @FXML private TableColumn<Book, String> PublisherCol;
        @FXML private TableColumn<Book, Long> ISBNCol;
        @FXML private TableColumn<Book, Integer> QuantityCol;
        @FXML private TableColumn<Book, Integer> Book_idCol;
	    
	
	@FXML
 void GoBack(ActionEvent event) throws IOException {
  	Parent  My_View_parent = FXMLLoader.load(getClass().getResource("MyView.fxml"));
 	Scene My_View_scene = new Scene(My_View_parent);
 	Stage app_stage  = (Stage) ((Node) event.getSource()).getScene().getWindow();
 	app_stage.setScene(My_View_scene);
 	app_stage.show();
 }
 

 @FXML
 void AdvSearch(ActionEvent event) throws IOException {
 	Parent Advanced_Search_parent = FXMLLoader.load(getClass().getResource("AdvancedSearch.fxml"));
 	Scene Advanced_Search_scene = new Scene(Advanced_Search_parent);
 	Stage app_stage  = (Stage) ((Node) event.getSource()).getScene().getWindow();
 	app_stage.setScene(Advanced_Search_scene);
 	app_stage.show();

 }
 @FXML
 void EnterMyBorrowedBooks(ActionEvent event) throws IOException {
 	Parent My_Books_parent = FXMLLoader.load(getClass().getResource("MyBooks.fxml"));
 	Scene My_Books_scene = new Scene(My_Books_parent);
 	Stage app_stage  = (Stage) ((Node) event.getSource()).getScene().getWindow();
 	app_stage.setScene(My_Books_scene);
 	app_stage.show();
 }
 
 @FXML
 void GoToToplist(ActionEvent event) throws IOException {
 	Parent Toplist_parent = FXMLLoader.load(getClass().getResource("Toplist.fxml"));
 	Scene Toplist_scene = new Scene(Toplist_parent);
 	Stage app_stage  = (Stage) ((Node) event.getSource()).getScene().getWindow();
 	app_stage.setScene(Toplist_scene);
 	app_stage.show();

 }

 @FXML
 void GoToCheckOut(ActionEvent event)  throws IOException {
 	Parent CheckOut_parent = FXMLLoader.load(getClass().getResource("CheckOut.fxml"));
 	Scene CheckOut_scene = new Scene(CheckOut_parent);
 	Stage app_stage  = (Stage) ((Node) event.getSource()).getScene().getWindow();
 	app_stage.setScene(CheckOut_scene);
 	app_stage.show();

 }
 
 public void initialize(URL location, ResourceBundle resources)  {
		
		
		//set up the columns in the table
		TitleCol.setCellValueFactory(new PropertyValueFactory<Book, String>("title"));
		AuthorCol.setCellValueFactory(new PropertyValueFactory<Book, String>("author"));
		GenreCol.setCellValueFactory(new PropertyValueFactory<Book, String>("genre"));
		PublisherCol.setCellValueFactory(new PropertyValueFactory<Book, String>("publisher"));
		PagesCol.setCellValueFactory(new PropertyValueFactory<Book, Integer>("pages"));
		ISBNCol.setCellValueFactory(new PropertyValueFactory<Book, Long>("isbn"));
		QuantityCol.setCellValueFactory(new PropertyValueFactory<Book, Integer>("quantity"));
		Book_idCol.setCellValueFactory(new PropertyValueFactory<Book, Integer>("book_id"));
		try {
			result.setItems(getToplist());
		} 
		catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		
	
	}
	public ObservableList<Book> getToplist() throws Exception{
		
		ObservableList<Book> book = FXCollections.observableArrayList();
		
		try (Database db = new Database()) {
			Book [] searchArray=db.getTop10();
			for(int i =0; i<searchArray.length; i++) {
				book.add(searchArray[i]);
			} 
		
		}
		return book;
	}
}
